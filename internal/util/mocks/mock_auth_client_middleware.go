// Code generated by MockGen. DO NOT EDIT.
// Source: internal/middleware/common/auth/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	slog "log/slog"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/upassed/upassed-submission-service/internal/config"
	amqp "github.com/upassed/upassed-submission-service/internal/middleware/amqp"
	grpc "google.golang.org/grpc"
)

// AuthClientMW is a mock of Client interface.
type AuthClientMW struct {
	ctrl     *gomock.Controller
	recorder *AuthClientMWMockRecorder
}

// AuthClientMWMockRecorder is the mock recorder for AuthClientMW.
type AuthClientMWMockRecorder struct {
	mock *AuthClientMW
}

// NewAuthClientMW creates a new mock instance.
func NewAuthClientMW(ctrl *gomock.Controller) *AuthClientMW {
	mock := &AuthClientMW{ctrl: ctrl}
	mock.recorder = &AuthClientMWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AuthClientMW) EXPECT() *AuthClientMWMockRecorder {
	return m.recorder
}

// AmqpMiddleware mocks base method.
func (m *AuthClientMW) AmqpMiddleware(arg0 *config.Config, arg1 *slog.Logger) amqp.Middleware {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmqpMiddleware", arg0, arg1)
	ret0, _ := ret[0].(amqp.Middleware)
	return ret0
}

// AmqpMiddleware indicates an expected call of AmqpMiddleware.
func (mr *AuthClientMWMockRecorder) AmqpMiddleware(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmqpMiddleware", reflect.TypeOf((*AuthClientMW)(nil).AmqpMiddleware), arg0, arg1)
}

// AnyAccountTypeAuthenticationFunc mocks base method.
func (m *AuthClientMW) AnyAccountTypeAuthenticationFunc(ctx context.Context, token string) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnyAccountTypeAuthenticationFunc", ctx, token)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnyAccountTypeAuthenticationFunc indicates an expected call of AnyAccountTypeAuthenticationFunc.
func (mr *AuthClientMWMockRecorder) AnyAccountTypeAuthenticationFunc(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnyAccountTypeAuthenticationFunc", reflect.TypeOf((*AuthClientMW)(nil).AnyAccountTypeAuthenticationFunc), ctx, token)
}

// AuthenticationUnaryServerInterceptor mocks base method.
func (m *AuthClientMW) AuthenticationUnaryServerInterceptor() func(context.Context, any, *grpc.UnaryServerInfo, grpc.UnaryHandler) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticationUnaryServerInterceptor")
	ret0, _ := ret[0].(func(context.Context, any, *grpc.UnaryServerInfo, grpc.UnaryHandler) (any, error))
	return ret0
}

// AuthenticationUnaryServerInterceptor indicates an expected call of AuthenticationUnaryServerInterceptor.
func (mr *AuthClientMWMockRecorder) AuthenticationUnaryServerInterceptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationUnaryServerInterceptor", reflect.TypeOf((*AuthClientMW)(nil).AuthenticationUnaryServerInterceptor))
}

// StudentAccountTypeAuthenticationFunc mocks base method.
func (m *AuthClientMW) StudentAccountTypeAuthenticationFunc(ctx context.Context, token string) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StudentAccountTypeAuthenticationFunc", ctx, token)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StudentAccountTypeAuthenticationFunc indicates an expected call of StudentAccountTypeAuthenticationFunc.
func (mr *AuthClientMWMockRecorder) StudentAccountTypeAuthenticationFunc(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StudentAccountTypeAuthenticationFunc", reflect.TypeOf((*AuthClientMW)(nil).StudentAccountTypeAuthenticationFunc), ctx, token)
}

// TeacherAccountTypeAuthenticationFunc mocks base method.
func (m *AuthClientMW) TeacherAccountTypeAuthenticationFunc(ctx context.Context, token string) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeacherAccountTypeAuthenticationFunc", ctx, token)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeacherAccountTypeAuthenticationFunc indicates an expected call of TeacherAccountTypeAuthenticationFunc.
func (mr *AuthClientMWMockRecorder) TeacherAccountTypeAuthenticationFunc(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeacherAccountTypeAuthenticationFunc", reflect.TypeOf((*AuthClientMW)(nil).TeacherAccountTypeAuthenticationFunc), ctx, token)
}
