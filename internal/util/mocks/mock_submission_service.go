// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/submission/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/upassed/upassed-submission-service/internal/repository/model"
	business "github.com/upassed/upassed-submission-service/internal/service/model"
)

// SubmissionService is a mock of Service interface.
type SubmissionService struct {
	ctrl     *gomock.Controller
	recorder *SubmissionServiceMockRecorder
}

// SubmissionServiceMockRecorder is the mock recorder for SubmissionService.
type SubmissionServiceMockRecorder struct {
	mock *SubmissionService
}

// NewSubmissionService creates a new mock instance.
func NewSubmissionService(ctrl *gomock.Controller) *SubmissionService {
	mock := &SubmissionService{ctrl: ctrl}
	mock.recorder = &SubmissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SubmissionService) EXPECT() *SubmissionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *SubmissionService) Create(ctx context.Context, submission *business.Submission) (*business.SubmissionCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, submission)
	ret0, _ := ret[0].(*business.SubmissionCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *SubmissionServiceMockRecorder) Create(ctx, submission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*SubmissionService)(nil).Create), ctx, submission)
}

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *Mockrepository) Delete(ctx context.Context, params *domain.SubmissionDeleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockrepositoryMockRecorder) Delete(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockrepository)(nil).Delete), ctx, params)
}

// Exists mocks base method.
func (m *Mockrepository) Exists(ctx context.Context, params *domain.SubmissionExistCheckParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, params)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockrepositoryMockRecorder) Exists(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*Mockrepository)(nil).Exists), ctx, params)
}

// Save mocks base method.
func (m *Mockrepository) Save(ctx context.Context, submissions []*domain.Submission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, submissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockrepositoryMockRecorder) Save(ctx, submissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*Mockrepository)(nil).Save), ctx, submissions)
}
