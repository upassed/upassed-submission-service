// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/submission/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/upassed/upassed-submission-service/internal/repository/model"
)

// SubmissionRepository is a mock of Repository interface.
type SubmissionRepository struct {
	ctrl     *gomock.Controller
	recorder *SubmissionRepositoryMockRecorder
}

// SubmissionRepositoryMockRecorder is the mock recorder for SubmissionRepository.
type SubmissionRepositoryMockRecorder struct {
	mock *SubmissionRepository
}

// NewSubmissionRepository creates a new mock instance.
func NewSubmissionRepository(ctrl *gomock.Controller) *SubmissionRepository {
	mock := &SubmissionRepository{ctrl: ctrl}
	mock.recorder = &SubmissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SubmissionRepository) EXPECT() *SubmissionRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *SubmissionRepository) Delete(ctx context.Context, params *domain.SubmissionDeleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *SubmissionRepositoryMockRecorder) Delete(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*SubmissionRepository)(nil).Delete), ctx, params)
}

// Exists mocks base method.
func (m *SubmissionRepository) Exists(ctx context.Context, params *domain.SubmissionExistCheckParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, params)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *SubmissionRepositoryMockRecorder) Exists(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*SubmissionRepository)(nil).Exists), ctx, params)
}

// FindStudentFormSubmissions mocks base method.
func (m *SubmissionRepository) FindStudentFormSubmissions(ctx context.Context, params *domain.StudentFormSubmissionsSearchParams) ([]*domain.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStudentFormSubmissions", ctx, params)
	ret0, _ := ret[0].([]*domain.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStudentFormSubmissions indicates an expected call of FindStudentFormSubmissions.
func (mr *SubmissionRepositoryMockRecorder) FindStudentFormSubmissions(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudentFormSubmissions", reflect.TypeOf((*SubmissionRepository)(nil).FindStudentFormSubmissions), ctx, params)
}

// Save mocks base method.
func (m *SubmissionRepository) Save(ctx context.Context, answers []*domain.Submission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, answers)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *SubmissionRepositoryMockRecorder) Save(ctx, answers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*SubmissionRepository)(nil).Save), ctx, answers)
}
